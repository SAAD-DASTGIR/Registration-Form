import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AddEditComponent } from './component/add-edit/add-edit.component';
import { EmployeeService } from './service/employee.service';
import { MatPaginator, PageEvent } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent implements OnInit, AfterViewInit {
  displayedColumns: string[] = [
    'first_name', 'last_name', 'DOB', 'qualification', 'email', 'experience',
    'cnic', 'address', 'company', 'package', 'gender', 'action'
  ]; // array of type string
  dataSource = new MatTableDataSource<any>(); // datsource for table
  totalRecords = 0; // default settings for server side pagination
  pageSize = 3;
  currentPage = 0;
  filterValue = '';
  sortField = '';
  sortDirection = '';
  sortOrder = '';

  dataSource1=new MatTableDataSource<any>() // datasource for pagination

  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;

  constructor(
    private _dialog: MatDialog, // to open dialogue
    private _empService: EmployeeService // to inject employee service
  ) { }

  ngOnInit(): void {
    this.loadEmployeeData(); // on first loads intialize the employee data
  }

  ngAfterViewInit(): void {
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
    this.sort.sortChange.subscribe((sort: any) => { // sortChnge is available on MatTable DataSource
      this.sortField = sort.active;
      this.sortOrder = sort.direction;
      this.loadEmployeeData();
    });
  }

  openEditEmpForm(data?: any) { // edit data in dialogue box
    const dialogRef = this._dialog.open(AddEditComponent, {
      data: data
    });
    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        if (data) { // if data is provided then than match its id and change the data
          this._empService.editEmployeeData(data.id, result).subscribe(() => this.loadEmployeeData());
        } else { // otherwise return the data
          this._empService.addEmployee(result).subscribe(() => this.loadEmployeeData());
        }
      }
    });
  }

  loadEmployeeData() { // setting the data of employee
    this._empService.getEmployeeData(this.currentPage + 1, this.pageSize, this.sortField, this.sortOrder,this.filterValue).subscribe((res: any) => {
      const data = res.data.map((item: any) => ({ // load the whole dataset
        id: item.id,
        ...item.attributes
      }));
      this.dataSource =new MatTableDataSource(data)
      this.dataSource1 =  data; //load the data source
      this.totalRecords = res.meta.pagination.total; // load the records from server
      this.dataSource1.paginator = this.paginator; // load the paginator
      this.dataSource.sort = this.sort; // sort the data in the data source
    });
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.filterValue = filterValue.trim().toLowerCase(); // store filter as event passed from input
    this.loadEmployeeData();
  }

  deleteEmployee(id: number) { // takes an id to delete the employeedata
    if (id !== undefined && id !== null) { // check the id if it is valid
      this._empService.deleteEmployeeData(id).subscribe({ // call delete services and passing id as parmater generated by strapi as default
        next: () => {
          this.loadEmployeeData(); // Reload data to reflect changes
        }
      });
    }
  }

  editEmployee(data: any) { // edit the employee and takes data as array as parameter
    this.openEditEmpForm(data); // passing data with patch value to the dialogue
  }

  onPageChange(event: PageEvent) { // server side pagination
    this.pageSize = event.pageSize; // check for pagesize from fontend
    this.currentPage = event.pageIndex;
    this.loadEmployeeData();
  }
}
